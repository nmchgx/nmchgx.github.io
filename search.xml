<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>使用命令行批量更新macOS软件</title>
      <link href="/update-all-macos-software-using-command-line/"/>
      <url>/update-all-macos-software-using-command-line/</url>
      
        <content type="html"><![CDATA[<p>嗯，就是想用命令行一键更新所有的软件，消除各种红点!</p><p>使用OS X（macOS）之后极大的满足了我折腾管理软件的诉求。从最开始的搭建python环境接触到 <a href="https://brew.sh/">Homebrew</a>，再到使用 <a href="http://caskroom.github.io/">Homebrew-Cask</a> 让 iTerm 和 Typora 等软件保持最新版本，最后在 <strong>少数派</strong> 学会了用 <a href="https://github.com/mas-cli/mas">mas</a> 更新Mac App Store的所有软件，一路折腾下来，终于可以使用命令行让mac绝大部分的软件保持最新版（确实强迫症）。下面就是完整的折腾记录。</p><h2 id="利用Homebrew管理程序包"><a href="#利用Homebrew管理程序包" class="headerlink" title="利用Homebrew管理程序包"></a>利用Homebrew管理程序包</h2><p><a href="https://brew.sh/">Homebrew</a> （以下简称 <strong>brew</strong>）是macOS系统下最著名的包管理软件，可以轻松的通过命令行安装程序包，并且还可以轻松的解决包的依赖问题。<strong>brew</strong> 的作者提供了简洁的安装教程，<a href="https://brew.sh/">教程传送门</a>。</p><p>安装 <strong>brew</strong> ：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/bin/ruby -e <span class="string">&quot;<span class="subst">$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)</span>&quot;</span></span><br></pre></td></tr></table></figure><p>对于安装新的程序包，我们可以使用 <code>brew install</code> 加上安装包的名字实现一键安装。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install package-name</span><br></pre></td></tr></table></figure><p>通常我们可以使用如下命令一键更新本地的程序包到最新版本。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew update &amp;&amp; brew upgrade</span><br></pre></td></tr></table></figure><p>如果碰巧你的 <strong>brew</strong> 更新缓慢，可以试试让 <strong>brew</strong> 走代理更新程序包。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="built_in">export</span> ALL_PROXY=socks5://127.0.0.1:your_port_number &gt;&gt; ~/.bash_profile</span><br></pre></td></tr></table></figure><h2 id="软件管理利器：Homebrew-Cask"><a href="#软件管理利器：Homebrew-Cask" class="headerlink" title="软件管理利器：Homebrew-Cask"></a>软件管理利器：Homebrew-Cask</h2><p>看名字应该能猜到 <a href="http://caskroom.github.io/">Homebrew-Cask</a> （以下简称Cask）是 Homebrew 的衍生品，可用来管理非App Store下载的软件。</p><p>安装 <strong>Cask</strong> ：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew tap caskroom/cask</span><br></pre></td></tr></table></figure><p>有了 <strong>Cask</strong> 安装软件变得很简单，只需要 <code>brew cask install</code> 加上软件的名称即可。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew cask install software-name</span><br></pre></td></tr></table></figure><p>我们还可以通过查找功能，找到我们想下载的软件名。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew cask search chrome</span><br></pre></td></tr></table></figure><p><strong>Cask</strong> 自带的更新方式比较麻烦，需要先删除软件包，再安装，以保证软件版本是最新，显然这是<strong>不推荐</strong>的。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew cask uninstall software-name &amp;&amp; brew cask install software-name</span><br></pre></td></tr></table></figure><p>几经周折，找到了一个不错的方案：<a href="https://github.com/buo/homebrew-cask-upgrade">buo&#x2F;homebrew-cask-upgrade</a> 。安装该方案也很方便，命令行输入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew tap buo/cask-upgrade</span><br></pre></td></tr></table></figure><p>现在可以一键更新所有的通过 <strong>Cask</strong> 安装的软件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew cu -a</span><br></pre></td></tr></table></figure><p><img src="https://nmchgxcom-1251534696.cos.ap-beijing.myqcloud.com/blog/brew-cask-upgrade.png"></p><h2 id="mas：一键升级Mac-App-Store"><a href="#mas：一键升级Mac-App-Store" class="headerlink" title="mas：一键升级Mac App Store"></a>mas：一键升级Mac App Store</h2><p>通常我们更新macOS的应用都是通过Mac App Store来更新，但对于不想打开 <strong>Store</strong> 的人来说 <a href="https://github.com/mas-cli/mas">mas</a> 是一个不错的选择，可以通过命令行方便的更新应用。</p><p>安装 <strong>mas</strong> 的前提是拥有 <strong>brew</strong> 的环境，前文已经讲到如何安装 <strong>brew</strong>。</p><p>安装 <strong>mas</strong> ：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install mas</span><br></pre></td></tr></table></figure><p>一键更新所有的 <strong>Store</strong> 应用：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mas upgrade</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>在拥有了以上三种工具之后，现在可以通过一条命令，更新所有的程序包和软件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew update &amp;&amp; brew upgrade &amp;&amp; brew cu -a -y &amp;&amp; mas upgrade</span><br></pre></td></tr></table></figure><p>红点再见。</p><p><strong>但不得不说让所有软件保持在最新版本是一件冒险的事情，虽然保证了能体验到最新的功能和特性，但也承担了不稳定的风险。所以按需更新，使用要谨慎！</strong></p><hr><p>感谢以下文章，给我提供的帮助和灵感：</p><p><a href="https://sspai.com/post/40382">少数派：终端上的 Mac App Store「mas」让应用的安装与更新无比轻松</a></p><p><a href="https://www.logcg.com/archives/1617.html">落格博客：让 Homebrew 走代理更新</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>我的写作环境</title>
      <link href="/my-writting-environment/"/>
      <url>/my-writting-environment/</url>
      
        <content type="html"><![CDATA[<p>接触Markdown格式的写作比较晚，带我入门的是 <strong>简书</strong>。平常主力写作还是在Macbook Pro上，也偶尔在iPhone上记笔记，所以想找个支持多平台同步的简洁好用的Markdown编辑器。写作工具尝试了很多，试过<a href="https://www.ulyssesapp.com/">Ulysses</a>、<a href="https://www.yinxiang.com/">Evernote</a>（不支持Markdown）、<a href="http://note.youdao.com/">有道云笔记</a>这些自带同步功能的编辑器，也试过把<a href="http://www.sublimetext.com/">Sublime Text</a>和<a href="https://atom.io/">Atom</a>改装成Markdown编辑器，但都不能令我满意。</p><p>最后选择了 <a href="https://typora.io/">Typora</a> + <a href="https://itunes.apple.com/cn/app/marklite-zhuan-ye-demarkdown/id1098107145?mt=8">MarkLite</a> 的写作组合，搭配 <strong>iCloud</strong> 和 <strong>Git</strong> 解决同步和备份问题。下面介绍下写作工具和搭建同步环境过程。</p><h2 id="写作工具"><a href="#写作工具" class="headerlink" title="写作工具"></a>写作工具</h2><h3 id="Typora"><a href="#Typora" class="headerlink" title="Typora"></a>Typora</h3><ul><li>平台：macOS</li><li><a href="https://typora.io/">下载地址</a></li></ul><p><img src="https://nmchgxcom-1251534696.cos.ap-beijing.myqcloud.com/blog/typora.png"></p><p>升级 macOS 10.12 之前一直用<a href="http://25.io/mou/">Mou</a>，但是开发者跑路了！原计划的更新泡汤了。于是逛逛 <strong>知乎</strong> 和 <strong>少数派</strong> 寻求新的编辑器。</p><p>直到看了下面的文章，决定转战<a href="https://typora.io/">Typora</a>。</p><p><a href="https://sspai.com/post/30292">少数派：让 Markdown 写作更简单，免费极简编辑器：Typora</a></p><p>Typora是纯粹的Markdown编辑器，同步功能暂未出现在当前的版本。</p><p>如何解决同步和备份问题，下文会有介绍。</p><h3 id="MarkLite"><a href="#MarkLite" class="headerlink" title="MarkLite"></a>MarkLite</h3><ul><li>平台：iOS</li><li><a href="https://github.com/zhubch/MarkLite">Github</a></li><li><a href="https://itunes.apple.com/cn/app/marklite-zhuan-ye-demarkdown/id1098107145?mt=8">下载地址</a></li></ul><p><img src="https://nmchgxcom-1251534696.cos.ap-beijing.myqcloud.com/blog/marklite.png"></p><p>极简，轻量，支持iCloud，MarkLite满足我对iOS端Markdown编辑器的要求，而且这个项目是开源的，还可以自己按自己的需求定制。</p><h2 id="同步方案"><a href="#同步方案" class="headerlink" title="同步方案"></a>同步方案</h2><h3 id="iCloud"><a href="#iCloud" class="headerlink" title="iCloud"></a>iCloud</h3><p>借助 <strong>MarkLite</strong> 的iCloud功能，在iOS端 <strong>MarkLite</strong> 的iCloud目录下创建一个 <strong>Markdown</strong> 文件，云端的 <strong>iCloud Drive</strong> 就会生成相应的文件夹，可以方便的在Mac端进行编辑。</p><p>这方案固然很好，iOS端和Mac端都可以编辑Markdown文档又可以同步，但如果误删了<strong>MarkLite</strong>，数据很有可能就丢失了 (￣▽￣)”。。。</p><p>虽然 <a href="https://www.icloud.com/">iCloud官网</a> 也提供了数据找回的服务，但不过仅可恢复<strong>一个月</strong>内删除的文件。</p><p>为了能更好的做好数据备份并且能在更多的平台编写我的文字，于是就有了<strong>Git</strong> + <strong>iCloud</strong> 的同步方案。</p><h3 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h3><p>实现方法原理很简单：将<strong>MarkLite</strong>的iCloud目录建成Git仓库并且自动同步。</p><p>首先在<a href="https://coding.net/">coding.net</a>创建私有Git仓库（也可以选择用自己的服务器搭建私有的Git仓库）。</p><ul><li>在本地将 <strong>MarkLite</strong> 的iCloud目录建成Git仓库。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">ln</span> -s ~/Library/Mobile\ Documents/iCloud~com~zhubch~Marklite/Documents/ Markdown</span><br><span class="line"><span class="built_in">cd</span> ~/Markdown</span><br><span class="line">git init</span><br><span class="line">git remote add origin git@git.coding.net:username/Markdown.git</span><br><span class="line">git add *</span><br><span class="line">git commit -m <span class="string">&quot;init&quot;</span></span><br><span class="line">git push</span><br></pre></td></tr></table></figure><ul><li>编写脚本，定时自动同步到Git远端仓库。</li></ul><p>利用<a href="https://zh.wikipedia.org/wiki/Cron">crontab</a>编写定时脚本，自动同步（可以在macOS和Linux下运行）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">crontab -e</span><br></pre></td></tr></table></figure><p>输入下列定时任务（每15分钟同步一次）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">*/15 * * * * <span class="built_in">cd</span> /Users/yourname/Markdown;git add .;git commit -m <span class="string">&quot;AutoSave&quot;</span>;git push origin master</span><br></pre></td></tr></table></figure><p>保存即可，可以用下列命令验定时脚本是否设置成功。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">crontab -l</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>利用GitHook持续部署Hexo博客</title>
      <link href="/githook-for-hexo-deployment/"/>
      <url>/githook-for-hexo-deployment/</url>
      
        <content type="html"><![CDATA[<p><a href="https://hexo.io/">Hexo博客</a>是一款基于Node.js的静态博客框架。</p><h1 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h1><p>首先确保本地已经安装<a href="https://nodejs.org/">Node.js</a>。</p><h3 id="安装并创建hexo博客"><a href="#安装并创建hexo博客" class="headerlink" title="安装并创建hexo博客"></a>安装并创建hexo博客</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~</span><br><span class="line">npm install hexo-cli -g</span><br><span class="line">hexo init blog</span><br><span class="line"><span class="built_in">cd</span> blog</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure><h3 id="安装发布插件"><a href="#安装发布插件" class="headerlink" title="安装发布插件"></a>安装发布插件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><h1 id="服务器创建静态博客存储Git仓库"><a href="#服务器创建静态博客存储Git仓库" class="headerlink" title="服务器创建静态博客存储Git仓库"></a>服务器创建静态博客存储Git仓库</h1><p>示例服务器环境：</p><ul><li>Centos 6.8</li><li>Git 1.7.1</li></ul><h3 id="创建git用户"><a href="#创建git用户" class="headerlink" title="创建git用户"></a>创建git用户</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo useradd git</span><br></pre></td></tr></table></figure><h3 id="创建仓库并附权限"><a href="#创建仓库并附权限" class="headerlink" title="创建仓库并附权限"></a>创建仓库并附权限</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo git init --bare /home/git/hexo-server.git</span><br><span class="line">sudo <span class="built_in">chown</span> -R git:git /home/git/hexo-server.git</span><br></pre></td></tr></table></figure><h3 id="给git用户附sudo权限"><a href="#给git用户附sudo权限" class="headerlink" title="给git用户附sudo权限"></a>给git用户附sudo权限</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">visudo</span><br></pre></td></tr></table></figure><p>在文件最后一行加上</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git ALL=(ALL) NOPASSWD: ALL</span><br></pre></td></tr></table></figure><h3 id="给root用户创建ssh-key"><a href="#给root用户创建ssh-key" class="headerlink" title="给root用户创建ssh-key"></a>给root用户创建ssh-key</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo <span class="built_in">mkdir</span> ~/.ssh</span><br><span class="line">sudo ssh-keygen</span><br></pre></td></tr></table></figure><h3 id="给git用户创建ssh-key"><a href="#给git用户创建ssh-key" class="headerlink" title="给git用户创建ssh-key"></a>给git用户创建ssh-key</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo <span class="built_in">mkdir</span> /home/git/.ssh</span><br><span class="line">su git</span><br><span class="line"><span class="built_in">cd</span> ~</span><br><span class="line">ssh-keygen</span><br></pre></td></tr></table></figure><h3 id="多用户免密使用Git"><a href="#多用户免密使用Git" class="headerlink" title="多用户免密使用Git"></a>多用户免密使用Git</h3><p>将多用户的ssh-key添加到服务器git用户的authorized_keys</p><p>本地：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cat</span> ~/.ssh/id_rsa.pub | ssh root@your_host <span class="string">&quot;cat - &gt;&gt; /home/git/.ssh/authorized_keys&quot;</span></span><br></pre></td></tr></table></figure><p>服务器：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cat</span> ~/.ssh/id_rsa.pub &gt;&gt; /home/git/.ssh/authorized_keys</span><br><span class="line"><span class="built_in">cat</span> /home/git/.ssh/id_rsa.pub &gt;&gt; /home/git/.ssh/authorized_keys</span><br></pre></td></tr></table></figure><h1 id="创建GitHook"><a href="#创建GitHook" class="headerlink" title="创建GitHook"></a>创建GitHook</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /home/git/hexo-server.git/hooks</span><br><span class="line">vim post-receive</span><br></pre></td></tr></table></figure><p>创建 <code>post-receive</code> ：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"><span class="built_in">cd</span> /var/www/hexo-server</span><br><span class="line"><span class="built_in">unset</span> GIT_DIR</span><br><span class="line">sudo git pull origin master</span><br></pre></td></tr></table></figure><p>附权限：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">chmod</span> +x post-receive</span><br></pre></td></tr></table></figure><h1 id="服务器克隆部署仓库"><a href="#服务器克隆部署仓库" class="headerlink" title="服务器克隆部署仓库"></a>服务器克隆部署仓库</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /var/www</span><br><span class="line">su git</span><br><span class="line">sudo git <span class="built_in">clone</span> git@localhost:/home/git/hexo-server.git</span><br></pre></td></tr></table></figure><p>nginx配置（https协议）：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span>               <span class="number">443</span> ssl http2;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">server_name</span>          your_host;</span><br><span class="line">    <span class="attribute">server_tokens</span>        <span class="literal">off</span>;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">ssl_certificate</span>      /var/www/ssl/chained.pem;</span><br><span class="line">    <span class="attribute">ssl_dhparam</span>          /var/www/ssl/dhparams.pem;</span><br><span class="line"></span><br><span class="line">    <span class="section">location</span> / &#123;</span><br><span class="line">        <span class="attribute">root</span>             /var/www/hexo-server/;</span><br><span class="line">        <span class="attribute">index</span>            index.html index.htm;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span>       <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">server_name</span>  your_host;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">return</span> <span class="number">301</span> https://<span class="variable">$host</span><span class="variable">$request_uri</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="本地Hexo配置远程部署仓库"><a href="#本地Hexo配置远程部署仓库" class="headerlink" title="本地Hexo配置远程部署仓库"></a>本地Hexo配置远程部署仓库</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/blog</span><br><span class="line">vim _config.yml</span><br></pre></td></tr></table></figure><p>修改 <code>_config.yml</code> :</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  <span class="built_in">type</span>: git</span><br><span class="line">  repository: git@your_host:/home/git/hexo-server.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><p>发布博客</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo generate &amp;&amp; hexo deploy</span><br></pre></td></tr></table></figure><p>至此可以在实现本地一键发布Hexo博客在私有的服务器了。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>用acme.sh申请免费的HTTPS证书</title>
      <link href="/acme-https/"/>
      <url>/acme-https/</url>
      
        <content type="html"><![CDATA[<p>拜读了 <a href="https://imququ.com/">屈光宇</a> 老师的文章：<a href="https://imququ.com/post/letsencrypt-certificate.html">Let’s Encrypt，免费好用的 HTTPS 证书</a> 后，决定将自己的网站实现全站HTTPS，采用的工具是 <a href="https://github.com/Neilpang/acme.sh">acme.sh</a> ，申请的是  <a href="https://letsencrypt.org/">Let’s Encrypt</a> 的免费HTTPS证书。</p><h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><h2 id="安装OpenSSL"><a href="#安装OpenSSL" class="headerlink" title="安装OpenSSL"></a>安装OpenSSL</h2><h3 id="Centos"><a href="#Centos" class="headerlink" title="Centos"></a>Centos</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install openssl</span><br></pre></td></tr></table></figure><h3 id="Ubuntu"><a href="#Ubuntu" class="headerlink" title="Ubuntu"></a>Ubuntu</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get openssl</span><br></pre></td></tr></table></figure><h2 id="安装acme-sh"><a href="#安装acme-sh" class="headerlink" title="安装acme.sh"></a>安装acme.sh</h2><p>选择服务器的一个目录存放 <strong>acme.sh</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl https://get.acme.sh | sh</span><br></pre></td></tr></table></figure><h1 id="获取证书"><a href="#获取证书" class="headerlink" title="获取证书"></a>获取证书</h1><p>由于我的服务器部署在阿里云，访问 <a href="https://letsencrypt.org/">Let’s Encrypt</a> 获取证书会访问超时。。。</p><p>万幸的是 <a href="https://github.com/Neilpang/acme.sh">acme.sh</a> 支持DNS模式，常用的 <a href="https://www.cloudflare.com/">CloudFlare</a> 、 <a href="https://www.dnspod.cn/">DNSPod</a> 、 <a href="https://www.cloudxns.net/">CloudXNS</a> 、<a href="https://www.aliyun.com/">阿里云</a> 等DNS服务都支持，免去了访问超时的尴尬，每一种DNS服务的配置详见项目的<a href="https://github.com/Neilpang/acme.sh">主页</a>，下面以 <a href="https://www.cloudxns.net/">CloudXNS</a> 为例来为 <a href="https://nmchgx.com/">nmchgx.com</a> 和 <a href="https://nmchgx.com/">www.nmchgx.com</a> 获取证书。</p><h2 id="配置CloudXNS授权"><a href="#配置CloudXNS授权" class="headerlink" title="配置CloudXNS授权"></a>配置CloudXNS授权</h2><p>修改 <code>account.conf</code> 文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim ~/.acme.sh/account.conf</span><br></pre></td></tr></table></figure><p>在文件最后加入 <a href="https://www.cloudxns.net/">CloudXNS</a> 的 <code>API KEY</code>  和 <code>SECRET KEY</code> ：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">CX_Key=<span class="string">&quot;[YOUR API KEY]&quot;</span></span><br><span class="line">CX_Secret=<span class="string">&quot;[YOUR SECRET KEY]&quot;</span></span><br></pre></td></tr></table></figure><p>保存即可。</p><h2 id="获取多个子域名证书"><a href="#获取多个子域名证书" class="headerlink" title="获取多个子域名证书"></a>获取多个子域名证书</h2><p><a href="https://github.com/Neilpang/acme.sh">acme.sh</a> 可以一次获取多个子域名证书：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sh acme.sh --issue --dns dns_cx \</span><br><span class="line">        -d nmchgx.com \</span><br><span class="line">        -d www.nmchgx.com \</span><br></pre></td></tr></table></figure><p>等到程序跑完后，若获取成功，再将证书保存到我们要存放的位置并重启服务器：</p><h3 id="nginx"><a href="#nginx" class="headerlink" title="nginx"></a>nginx</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sh acme.sh  --installcert  -d nmchgx.com   \</span><br><span class="line">        --keypath   /var/www/ssl/domain.key \</span><br><span class="line">        --fullchainpath /var/www/ssl/chained.pem \</span><br><span class="line">        --reloadcmd  <span class="string">&quot;service nginx force-reload&quot;</span></span><br></pre></td></tr></table></figure><h3 id="Apache"><a href="#Apache" class="headerlink" title="Apache"></a>Apache</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sh acme.sh  --installcert  -d nmchgx.com   \</span><br><span class="line">        --keypath   /var/www/ssl/domain.key \</span><br><span class="line">        --fullchainpath /var/www/ssl/chained.pem \</span><br><span class="line">        --reloadcmd  <span class="string">&quot;service apache2 force-reload&quot;</span></span><br></pre></td></tr></table></figure><h1 id="启用HTTPS服务"><a href="#启用HTTPS服务" class="headerlink" title="启用HTTPS服务"></a>启用HTTPS服务</h1><blockquote><p>与HTTP的URL由“<code>http://</code>”起始且默认使用端口80不同，HTTPS的URL由“<code>https://</code>”起始且默认使用端口443。 — by <a href="https://zh.wikipedia.org/wiki/%E8%B6%85%E6%96%87%E6%9C%AC%E4%BC%A0%E8%BE%93%E5%AE%89%E5%85%A8%E5%8D%8F%E8%AE%AE">Wikipedia</a></p></blockquote><p>我们需要修改服务器的配置文件启用HTTPS，下面以nginx为例，将所有访问跳转到 <a href="https://nmchgx.com/">https://nmchgx.com</a> ：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># The default server</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"></span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span>               <span class="number">443</span> ssl;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">server_name</span>          www.nmchgx.com nmchgx.com;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">ssl_certificate</span>      /var/www/ssl/chained.pem;</span><br><span class="line">    <span class="attribute">ssl_certificate_key</span>  /var/www/ssl/domain.key;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">if</span> (<span class="variable">$host</span> != <span class="string">&#x27;nmchgx.com&#x27;</span> ) &#123;</span><br><span class="line">        <span class="attribute">rewrite</span>         <span class="regexp"> ^/(.*)$</span>  https://nmchgx.com/<span class="variable">$1</span> <span class="literal">permanent</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="section">location</span> / &#123;</span><br><span class="line">        <span class="attribute">proxy_set_header</span>         Host             nmchgx.com;</span><br><span class="line">        <span class="attribute">proxy_set_header</span>         X-Real_IP        <span class="variable">$remote_addr</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span>         X-Forwarded-For  <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">        <span class="attribute">proxy_pass</span>               http://127.0.0.1:2368;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span>       <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">server_name</span>  <span class="regexp">*.nmchgx.com</span> nmchgx.com;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">return</span> <span class="number">301</span> https://<span class="variable">$host</span><span class="variable">$request_uri</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>配置好后，重启服务器即可：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service nginx restart</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Ghost博客添加对象云存储支持</title>
      <link href="/ghostblog-object-storage/"/>
      <url>/ghostblog-object-storage/</url>
      
        <content type="html"><![CDATA[<p>官方原版的<a href="https://ghost.org/">Ghost博客</a>是不支持对象云存储的，平时习惯了图像等资源存储到<a href="https://www.qiniu.com/">七牛云</a>或<a href="https://www.upyun.com/">又拍云</a>，于是寻觅Github果然有人分别做了插件提供支持，很感谢<a href="https://github.com/sanddudu">@sanddudu</a>和<a href="https://github.com/minwe">@Minwe</a>两位作者。下面介绍下如何来使用两款插件。</p><h1 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h1><ul><li><p>确保你的<a href="https://ghost.org/">Ghost博客</a>版本大于等于0.6.0版本。</p></li><li><p>拥有<a href="https://www.qiniu.com/">七牛云</a>或<a href="https://www.upyun.com/">又拍云</a>对象存储服务。</p></li></ul><h1 id="qn-store-七牛云支持插件"><a href="#qn-store-七牛云支持插件" class="headerlink" title="qn-store - 七牛云支持插件"></a>qn-store - 七牛云支持插件</h1><p><a href="https://github.com/Minwe/qn-store"><strong>qn-store</strong></a>这款插件是给Ghost博客提供七牛云存储支持。安装方法如下：</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><ul><li>在 <code>content</code> 文件夹中创建一个名为 <code>storage</code> 的文件夹</li><li>将本仓库克隆至 <code>storage</code> 文件夹下</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> [path/to/ghost]/content/storage</span><br><span class="line">git <span class="built_in">clone</span> https://github.com/Minwe/qn-store.git</span><br></pre></td></tr></table></figure><h2 id="安装依赖包"><a href="#安装依赖包" class="headerlink" title="安装依赖包"></a>安装依赖包</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> qn-store</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>配置Ghost根目录下的 <code>config.js</code> 将原有的 <code>storage</code> 部分替换为下面配置：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">storage</span>: &#123;</span><br><span class="line">    <span class="attr">active</span>: <span class="string">&#x27;qn-store&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;qn-store&#x27;</span>: &#123;</span><br><span class="line">        <span class="attr">accessKey</span>: <span class="string">&#x27;your access key&#x27;</span>,</span><br><span class="line">        <span class="attr">secretKey</span>: <span class="string">&#x27;your secret key&#x27;</span>,</span><br><span class="line">        <span class="attr">bucket</span>: <span class="string">&#x27;your bucket name&#x27;</span>,</span><br><span class="line">        <span class="attr">origin</span>: <span class="string">&#x27;http://xxx.bkt.clouddn.com&#x27;</span>,</span><br><span class="line">        <span class="attr">fileKey</span>: &#123;</span><br><span class="line">            <span class="attr">safeString</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">prefix</span>: <span class="string">&#x27;[images]/YYYY/MM/&#x27;</span>,</span><br><span class="line">            <span class="attr">suffix</span>: <span class="string">&#x27;&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>更多参数的设置详见插件的官方说明：<a href="https://github.com/Minwe/qn-store"><strong>qn-store</strong></a></p><h1 id="upyun-ghost-store-又拍云支持插件"><a href="#upyun-ghost-store-又拍云支持插件" class="headerlink" title="upyun-ghost-store - 又拍云支持插件"></a>upyun-ghost-store - 又拍云支持插件</h1><p><a href="https://github.com/sanddudu/upyun-ghost-store"><strong>upyun-ghost-store</strong></a>这款插件是给Ghost博客提供又拍云存储支持。安装方法如下：</p><h2 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h2><ul><li>在 <code>content</code> 文件夹中创建一个名为 <code>storage</code> 的文件夹</li><li>将本仓库克隆至 <code>storage</code> 文件夹下</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> [path/to/ghost]/content/storage</span><br><span class="line">git <span class="built_in">clone</span> https://github.com/sanddudu/upyun-ghost-store.git</span><br></pre></td></tr></table></figure><h2 id="安装依赖包-1"><a href="#安装依赖包-1" class="headerlink" title="安装依赖包"></a>安装依赖包</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> upyun-ghost-store</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure><h2 id="配置-1"><a href="#配置-1" class="headerlink" title="配置"></a>配置</h2><p>配置Ghost根目录下的 <code>config.js</code> 将原有的 <code>storage</code> 部分替换为下面配置：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">storage</span>: &#123;</span><br><span class="line">    <span class="attr">active</span>: <span class="string">&#x27;upyun-ghost-store&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;upyun-ghost-store&#x27;</span>: &#123;</span><br><span class="line">        <span class="attr">bucket</span>: <span class="string">&#x27;my-bucket&#x27;</span>, <span class="comment">//bucket 名称</span></span><br><span class="line">        <span class="attr">operator</span>: <span class="string">&#x27;somebody&#x27;</span>, <span class="comment">//操作员用户名</span></span><br><span class="line">        <span class="attr">password</span>: <span class="string">&#x27;secret&#x27;</span>, <span class="comment">//操作员密码</span></span><br><span class="line">        <span class="attr">domain</span>: <span class="string">&#x27;http://bucket.b0.upaiyun.com&#x27;</span>, <span class="comment">//空间绑定的域名，必须带 &quot;http(s)://&quot; ，结尾不能有 &quot;/&quot;</span></span><br><span class="line">        <span class="attr">filePath</span>: <span class="string">&#x27;[blog]/YYYY/MM/&#x27;</span> <span class="comment">//文件远端保存地址</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>更多参数的设置详见插件的官方说明：<a href="https://github.com/sanddudu/upyun-ghost-store"><strong>upyun-ghost-store</strong></a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Centos6启用FTP服务</title>
      <link href="/configure-ftp-on-centos/"/>
      <url>/configure-ftp-on-centos/</url>
      
        <content type="html"><![CDATA[<p>服务器启用FTP服务，可以很方便的在服务器和本地设备之间传输数据，以下是在<strong>Centos6.5</strong>环境下配置的记录，同样适用于其他版本的<strong>Centos6.x</strong>系统。</p><h3 id="Step1：安装vsftpd"><a href="#Step1：安装vsftpd" class="headerlink" title="Step1：安装vsftpd"></a>Step1：安装vsftpd</h3><p><code>yum install vsftpd ftp</code></p><h3 id="Step2：配置vsftpd"><a href="#Step2：配置vsftpd" class="headerlink" title="Step2：配置vsftpd"></a>Step2：配置vsftpd</h3><p><code>vim /etc/vsftpd/vsftpd.conf</code></p><p>需要更改以下参数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 禁用匿名登录</span></span><br><span class="line">anonymous_enable=NO</span><br><span class="line"><span class="comment"># 允许本地登录</span></span><br><span class="line">local_enable=YES</span><br><span class="line"><span class="comment"># 本地用户的写权限</span></span><br><span class="line">write_enable=YES</span><br><span class="line"><span class="comment"># FTP的本地文件权限设置为022</span></span><br><span class="line">local_umask=022</span><br><span class="line"></span><br><span class="line"><span class="comment"># 限制所有用户都在家目录</span></span><br><span class="line">chroot_local_user=yes</span><br><span class="line"><span class="comment"># 调用限制在家目录的用户名单</span></span><br><span class="line">chroot_list_enable=YES</span><br><span class="line"><span class="comment"># 限制在家目录的用户名单所在路径</span></span><br><span class="line">chroot_list_file=/etc/vsftpd/chroot_list</span><br><span class="line"></span><br><span class="line"><span class="comment"># 以独立的FTP服务运行</span></span><br><span class="line">listen=YES</span><br><span class="line"><span class="comment"># 用userlist来限制用户访问</span></span><br><span class="line">userlist_enable=YES</span><br></pre></td></tr></table></figure><p>修改后保存即可。</p><h3 id="Step3：添加用户"><a href="#Step3：添加用户" class="headerlink" title="Step3：添加用户"></a>Step3：添加用户</h3><p><code>useradd -d /var/ftp/public_root -g ftp -s /sbin/nologin ftpuser</code></p><p>输入上述命令后，根据提示设置 <code>ftpuser</code> 的登录密码即可。</p><p><strong>之后我们上传的文件都将在目录 <code>/var/ftp/public_root</code> 下。</strong></p><h3 id="Step4：开启FTP"><a href="#Step4：开启FTP" class="headerlink" title="Step4：开启FTP"></a>Step4：开启FTP</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># service vsftpd stop：停止服务</span></span><br><span class="line"><span class="comment"># service vsftpd restart：重启服务</span></span><br><span class="line">service vsftpd start</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置开机启动 FTP 服务</span></span><br><span class="line">chkconfig vsftpd on</span><br></pre></td></tr></table></figure><h3 id="Step5：远程FTP登录"><a href="#Step5：远程FTP登录" class="headerlink" title="Step5：远程FTP登录"></a>Step5：远程FTP登录</h3><p>这里推荐开源免费的优秀软件<a href="https://filezilla-project.org/">FileZilla</a>在本地登录开启FTP的服务器。输入主机IP、用户名（ftpuser）和密码即可快捷使用<strong>FTP</strong>服务。</p><p><img src="https://nmchgxcom-1251534696.cos.ap-beijing.myqcloud.com/blog/fz3_osx_sitemanager.png"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>实践：Java代码静态分析函数调用及生成时序图</title>
      <link href="/analysis-java-with-static-method/"/>
      <url>/analysis-java-with-static-method/</url>
      
        <content type="html"><![CDATA[<h3 id="Step1：生成Java代码静态分析结果"><a href="#Step1：生成Java代码静态分析结果" class="headerlink" title="Step1：生成Java代码静态分析结果"></a>Step1：生成Java代码静态分析结果</h3><p>这里我们采用的是开源的工具<a href="https://github.com/gousiosg/java-callgraph">java-callgraph</a>来做Java代码的静态分析，根据官方的说明需按下面步骤来实现：</p><h4 id="1-克隆项目到本地"><a href="#1-克隆项目到本地" class="headerlink" title="1.克隆项目到本地"></a>1.克隆项目到本地</h4><p><code>git clone https://github.com/gousiosg/java-callgraph</code></p><h4 id="2-用maven安装项目"><a href="#2-用maven安装项目" class="headerlink" title="2.用maven安装项目"></a>2.用maven安装项目</h4><p><code>mvn install</code></p><blockquote><p>若未安装 <a href="http://maven.apache.org/">maven</a>，macOS用户可尝试使用 <a href="http://brew.sh/">homebrew</a> 安装，<code>brew update &amp;&amp; brew install maven</code>，其他用户可访问<a href="http://maven.apache.org/">官网</a>安装。</p></blockquote><h4 id="3-打包被测试文件"><a href="#3-打包被测试文件" class="headerlink" title="3.打包被测试文件"></a>3.打包被测试文件</h4><p>我们需要借助<a href="http://download.eclipse.org/">Eclipse</a>来将我们的被测试文件打包为<strong>jar</strong>包，打包后的文件记为 <code>test.jar</code> 。</p><h4 id="4-运行工具生成结果"><a href="#4-运行工具生成结果" class="headerlink" title="4.运行工具生成结果"></a>4.运行工具生成结果</h4><p>将 <code>test.jar</code> 移动到工具安装目录下的 <code>./target</code> 目录下。</p><p>只需一个命令就可生成静态分析结果：</p><p><code>java -jar javacg-0.1-SNAPSHOT-static.jar test.jar</code></p><p><img src="https://nmchgxcom-1251534696.cos.ap-beijing.myqcloud.com/blog/ping-mu-kuai-zhao-2017-01-03-xia-wu-9-41-10.png"></p><p>其中结果的具体含义请参照工具的官方介绍。</p><p>将结果保存为文件即可。</p><h3 id="Step2：处理分析结果"><a href="#Step2：处理分析结果" class="headerlink" title="Step2：处理分析结果"></a>Step2：处理分析结果</h3><p>需要把分析结果过滤得到我们需要用的信息，并用 <code>json</code> 格式存储，保存为文件 <code>test.json</code>，格式规范如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;data&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;caller&quot;</span><span class="punctuation">:</span> <span class="string">&quot;main&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;callee&quot;</span><span class="punctuation">:</span> <span class="string">&quot;main&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;caller&quot;</span><span class="punctuation">:</span> <span class="string">&quot;main&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;callee&quot;</span><span class="punctuation">:</span> <span class="string">&quot;A&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>其中 <code>caller</code> 代表函数调用者，<code>callee</code> 代表函数被调用者。</p><h3 id="Step3：制作时序图"><a href="#Step3：制作时序图" class="headerlink" title="Step3：制作时序图"></a>Step3：制作时序图</h3><p>制作时序图采用的工具是<a href="https://www.websequencediagrams.com/">Web Sequence Diagrams</a>在线时序图绘制工具。</p><p>根据工具说明要将我们的函数调用关系再格式化，处理成形如 <code>A-&gt;B: 调用</code> 的格式，下面是格式化的 <code>python</code> 代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">reload(sys)</span><br><span class="line">sys.setdefaultencoding(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">store</span>(<span class="params">data</span>):</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;test.json&#x27;</span>, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> json_file:</span><br><span class="line">        json_file.write(json.dumps(data))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">load</span>():</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;test.json&#x27;</span>) <span class="keyword">as</span> json_file:</span><br><span class="line">        data = json.load(json_file)</span><br><span class="line">        <span class="keyword">return</span> data[<span class="string">&#x27;data&#x27;</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    data = load()</span><br><span class="line"></span><br><span class="line">    n = <span class="built_in">len</span>(data)</span><br><span class="line">    f = <span class="built_in">open</span>(<span class="string">&quot;test.txt&quot;</span>, <span class="string">&quot;w+&quot;</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, n):</span><br><span class="line">        f.write(<span class="string">&quot;%s-&gt;%s: 调用\n&quot;</span>%(data[i][<span class="string">&#x27;caller&#x27;</span>],data[i][<span class="string">&#x27;callee&#x27;</span>]))</span><br></pre></td></tr></table></figure><p>格式化后我们得到处理后的文本 <code>test.txt</code>，将文本内容复制到<a href="https://www.websequencediagrams.com/">Web Sequence Diagrams</a>中即可，等待一会之后，我们就可以得到绘制好的时序图，可保存为文件。</p><p><img src="https://nmchgxcom-1251534696.cos.ap-beijing.myqcloud.com/blog/authentication-sequencede-fu-ben.png"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>用PHP下载网络图片到本地</title>
      <link href="/php-image-download/"/>
      <url>/php-image-download/</url>
      
        <content type="html"><![CDATA[<p>最近写项目，要对存储在七牛云的图片进行汉明码处理，需要把网络图片存储到本地再计算汉明码。但用PHP下载图片到本地还是遇到了一些坑点，记录一下解决的整个过程。</p><h1 id="建立本地存储文件夹"><a href="#建立本地存储文件夹" class="headerlink" title="建立本地存储文件夹"></a>建立本地存储文件夹</h1><p>在本地建立文件夹 <code>mkdir /var/www/html/&#123;your_project_name&#125;/cache</code></p><p>给文件夹附最高读写权限 <code>chmod 777 /var/www/html/project/cache/</code> 。</p><p>这里要注意父文件夹的所有者应该与 <em>nginx</em> 或 <em>Apache</em> 使用的用户一致。</p><h1 id="利用cURL下载文件"><a href="#利用cURL下载文件" class="headerlink" title="利用cURL下载文件"></a>利用cURL下载文件</h1><p><code>cURL</code> 比 <code>file_get_contents</code> 速度快了30%左右,而且服务器负载更低。故选择cURL方法下载文件。附：<a href="http://www.jianshu.com/p/635513f9bef8">cURL参数选项</a></p><p>PHP源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">http_get_data</span>(<span class="params"><span class="variable">$url</span></span>) </span>&#123;  </span><br><span class="line">    <span class="variable">$ch</span> = <span class="title function_ invoke__">curl_init</span> ();  </span><br><span class="line">    <span class="title function_ invoke__">curl_setopt</span> ( <span class="variable">$ch</span>, CURLOPT_CUSTOMREQUEST, <span class="string">&#x27;GET&#x27;</span> );  </span><br><span class="line">    <span class="title function_ invoke__">curl_setopt</span> ( <span class="variable">$ch</span>, CURLOPT_SSL_VERIFYPEER, <span class="literal">false</span> );  </span><br><span class="line">    <span class="title function_ invoke__">curl_setopt</span> ( <span class="variable">$ch</span>, CURLOPT_URL, <span class="variable">$url</span> );  </span><br><span class="line">    <span class="title function_ invoke__">ob_start</span> ();  </span><br><span class="line">    <span class="title function_ invoke__">curl_exec</span> ( <span class="variable">$ch</span> );  </span><br><span class="line">    <span class="variable">$return_content</span> = <span class="title function_ invoke__">ob_get_contents</span> ();  </span><br><span class="line">    <span class="title function_ invoke__">ob_end_clean</span> ();  </span><br><span class="line">          </span><br><span class="line">    <span class="variable">$return_code</span> = <span class="title function_ invoke__">curl_getinfo</span> ( <span class="variable">$ch</span>, CURLINFO_HTTP_CODE );  </span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$return_content</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="存储图片文件"><a href="#存储图片文件" class="headerlink" title="存储图片文件"></a>存储图片文件</h1><p>存储文件需要用 <em>绝对路径</em> ，这里采用的是最简单的 <code>fwrite</code> 方法。</p><p>PHP源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">DownloadImage</span>(<span class="params"><span class="variable">$key</span></span>) </span>&#123;</span><br><span class="line">    <span class="variable">$dir</span> = <span class="string">&#x27;/var/www/html/&#123;your_project_name&#125;/cache/&#x27;</span>;</span><br><span class="line">    <span class="variable">$file_name</span> =  <span class="variable">$dir</span> . <span class="variable">$key</span> . <span class="string">&#x27;.png&#x27;</span>;</span><br><span class="line">    <span class="variable">$url</span> = <span class="string">&#x27;&#123;your_image_url&#125;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="variable">$return_content</span> = <span class="title function_ invoke__">http_get_data</span>(<span class="variable">$url</span>);</span><br><span class="line">    <span class="variable">$fp</span> = @<span class="title function_ invoke__">fopen</span>(<span class="variable">$file_name</span>, <span class="string">&#x27;a&#x27;</span>); <span class="comment">//将文件绑定到流</span></span><br><span class="line">    <span class="title function_ invoke__">fwrite</span>(<span class="variable">$fp</span>,<span class="variable">$return_content</span>); <span class="comment">//写入文件</span></span><br><span class="line">    <span class="title function_ invoke__">fclose</span>(<span class="variable">$fp</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>至此，使用上述方法就可以用PHP下载网络图片到本地啦。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Eclipse 下开发 AspectJ</title>
      <link href="/aspectj-eclipse/"/>
      <url>/aspectj-eclipse/</url>
      
        <content type="html"><![CDATA[<blockquote><p>AspectJ是一个面向切面的框架，它扩展了Java语言。AspectJ定义了AOP语法所以它有一个专门的编译器用来生成遵守Java字节编码规范的Class文件。 – <a href="http://baike.baidu.com/view/987127.htm">百度百科</a></p></blockquote><p>面向切面编程，听起来很高端。</p><p>那就先写一个Eclipse下开发Aspectj的教程。</p><h1 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h1><ul><li><p><a href="http://www.eclipse.org/downloads/">Eclipse</a></p></li><li><p><a href="http://www.java.com/zh_CN/">Java</a></p></li></ul><h1 id="安装AJDT插件"><a href="#安装AJDT插件" class="headerlink" title="安装AJDT插件"></a>安装AJDT插件</h1><ul><li>选择菜单 <code>Help</code> -&gt; <code>Install New Software</code> 在窗口输入下载地址 <code>http://download.eclipse.org/tools/ajdt/45/dev/update</code> ，加载之后安装所有安装包。（编写此文时最新版本为Eclipse 4.5.2，请根据Eclipse版本选择相应的<a href="http://www.eclipse.org/ajdt/downloads/">AJDT</a>）</li></ul><p><img src="https://nmchgxcom-1251534696.cos.ap-beijing.myqcloud.com/blog/2016-03-14-3-02-15.png"></p><h1 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h1><ul><li>新建 <code>Project</code> 在新窗口选择 <code>Aspectj Project</code></li></ul><p><img src="https://nmchgxcom-1251534696.cos.ap-beijing.myqcloud.com/blog/2016-03-14-3-05-15.png"></p><h1 id="编写demo"><a href="#编写demo" class="headerlink" title="编写demo"></a>编写demo</h1><ul><li>在 <code>src</code> 目录下创建 <code>Class</code> 文件 <code>com.aspectj.demo.test.HelloWorld</code> 内容如下：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.aspectj.demo.test;  </span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloWorld</span> &#123;  </span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment">     */</span>  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;  </span><br><span class="line"></span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>在 <code>src</code> 目录下创建 <code>Aspect</code> 文件 <code>com.aspectj.demo.aspect.HelloAspec</code> 内容如下：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.aspectj.demo.aspect;  </span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> aspect HelloAspect &#123;  </span><br><span class="line"></span><br><span class="line">    pointcut <span class="title function_">HelloWorldPointCut</span><span class="params">()</span> : execution(* com.aspectj.demo.test.HelloWorld.main(..));  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    before() : HelloWorldPointCut()&#123;  </span><br><span class="line">        System.out.println(<span class="string">&quot;Hello world&quot;</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>Run</code> 整个项目，选择 <code>AspectJ/Java Application</code>。如果控制台出现 <code>Hello world</code> ，那恭喜你成功啦。</li></ul><p><img src="https://nmchgxcom-1251534696.cos.ap-beijing.myqcloud.com/blog/2016-03-14-3-12-56.png"></p><h1 id="更多教程"><a href="#更多教程" class="headerlink" title="更多教程"></a>更多教程</h1><ul><li><a href="http://blog.csdn.net/zl3450341/article/details/7673938">CSDN教程</a></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>IntelliJ IDEA 下开发 AspectJ</title>
      <link href="/eclipse-idea/"/>
      <url>/eclipse-idea/</url>
      
        <content type="html"><![CDATA[<blockquote><p>AspectJ是一个面向切面的框架，它扩展了Java语言。AspectJ定义了AOP语法所以它有一个专门的编译器用来生成遵守Java字节编码规范的Class文件。 – <a href="http://baike.baidu.com/view/987127.htm">百度百科</a></p></blockquote><p>面向切面编程，听起来很高端。</p><p>既然要写和Java有关的项目，果断放弃Eclipse选择IntelliJ IDEA（以下简称IDEA）作为IDE。</p><h1 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h1><ul><li><p><a href="http://www.jetbrains.com/idea/">IntelliJ IDEA Ultimate</a> 版本(只有Ultimate版本支持AspectJ的开发)</p></li><li><p><a href="http://www.java.com/zh_CN/">Java</a></p></li><li><p><a href="http://maven.apache.org/download.cgi">Maven</a></p></li></ul><h1 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h1><ul><li>打开IDEA新建项目，选择Maven</li></ul><p><img src="https://nmchgxcom-1251534696.cos.ap-beijing.myqcloud.com/blog/2016-03-13-9-09-52.png"></p><ul><li><p>填好信息之后，创建项目</p></li><li><p>在偏好设置里检查Maven环境是否正确，如图所示选择 <code>Maven home directory</code> 为之前配置好的Maven目录</p></li></ul><p><img src="https://nmchgxcom-1251534696.cos.ap-beijing.myqcloud.com/blog/2016-03-13-9-13-34.png"></p><ul><li>替换 <code>pom.xml</code> 的内容（感谢韬懿大神）为：</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.huntdreams<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aspectj<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>1.6<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>1.6<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--junit--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.8.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--aspectj--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.aspectj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aspectjrt<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.6.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- log4j --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.17<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.codehaus.mojo<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aspectj-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">goal</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">goal</span>&gt;</span><span class="comment">&lt;!-- to weave all your main classes --&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">goal</span>&gt;</span>test-compile<span class="tag">&lt;/<span class="name">goal</span>&gt;</span><span class="comment">&lt;!-- to weave all your test classes --&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">source</span>&gt;</span>$&#123;maven.compiler.source&#125;<span class="tag">&lt;/<span class="name">source</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">target</span>&gt;</span>$&#123;maven.compiler.target&#125;<span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>菜单栏里选择 <code>View</code> -&gt; <code>Tool Windows</code> -&gt; <code>Maven Projects</code> , 在右侧的面板中点击<strong>刷新</strong>按钮。如图所示，左侧面板的 <code>External Libraries</code> 下出现了3个 <code>Maven</code> 开头的目录，则导入成功。</li></ul><p><img src="https://nmchgxcom-1251534696.cos.ap-beijing.myqcloud.com/blog/2016-03-13-9-20-24.png"></p><h1 id="编写demo"><a href="#编写demo" class="headerlink" title="编写demo"></a>编写demo</h1><ul><li>检查Sources目录。如图 <code>Java目录</code> 为蓝色，则该目录为Sources目录，之后写的文件都存放在该目录下。</li></ul><p><img src="https://nmchgxcom-1251534696.cos.ap-beijing.myqcloud.com/blog/2016-03-13-9-50-15.png"></p><ul><li>在 <code>java目录</code> 下创建 <code>Java Class</code> 文件 <code>com.aspectj.demo.test.HelloWorld</code> 内容如下：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.aspectj.demo.test;  </span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloWorld</span> &#123;  </span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment">     */</span>  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;  </span><br><span class="line"></span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>在 <code>java目录</code> 下创建 <code>Aspect</code> 文件 <code>com.aspectj.demo.aspect.HelloAspect</code> 内容如下：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.aspectj.demo.aspect;  </span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> aspect HelloAspect &#123;  </span><br><span class="line"></span><br><span class="line">    pointcut <span class="title function_">HelloWorldPointCut</span><span class="params">()</span> : execution(* com.aspectj.demo.test.HelloWorld.main(..));  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    before() : HelloWorldPointCut()&#123;  </span><br><span class="line">        System.out.println(<span class="string">&quot;Hello world&quot;</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>Run</code> 整个项目，如果控制台出现 <code>Hello world</code> ，那恭喜你成功啦。</li></ul>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
